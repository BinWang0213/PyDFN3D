import numpy as np
from collections import defaultdict
from ..Utils.Geometry import calcDist3D

def read_PyGeoMeshFile_dat(FracNets, fname,delimiter=' ',commenter='--',blockender='/'):
        ''' Read Fracture Network File generated by ADFNE1.5
            http://alghalandis.net/products/adfne/adfne15
        
        FileFormat:
        
        DFN_INFO
        --Dimension,NumPts,NumFracs,NumInts,NumClusters,NumWells
        3 35 10 14 15 2
        /

        DFN_BBOX
        --bottom left,top right
        x1,y1,z1
        x2,y2,z2
        /

        DFN_POINTS
        NumPts
        x1,y1,z1..
        x2,y2,z2..
        /

        DFN_CLUSTERS
        NumClusters
        ClusterID NumFrac FracIDlist[1,5,10..]
        ...
        /

        DFN_FRACTURES
        NumFracs
        NumPts IDlist[1,2,3...NumPts]
        ..
        /

        DFN_INTERSECTIONS
        NumInts
        FracID1 FracID2 IDlist[1,2,3...NumPts]
        ...

        DFN_PERMS
        NumFracs
        k [kxy kyy] optional
        ...
        /

        DFN_APERTURE
        NumFracs
        d
        ...

        WELL_DFN_INTERSECTIONS
        NumWells
        NumInts (FracID1,IntID1) (FracID2, IntID2) ....
        ....
        /

        Author:Bin Wang(binwang.0213@gmail.com)
        Date: June. 2018
        '''
        #Reset data
        FracNets.Points = []
        FracNets.Fractures = []
        FracNets.NumPtsFrac = []
        
        FracNets.IntersectsLines = [] #3D 
        FracNets.IntersectsPts= [] #2D
        FracNets.IntersectFracs = []
        FracNets.FracIntersects = []
        FracNets.WellFracIntersects = []
        FracNets.FracsIntersectWell = defaultdict(list)

        FracNets.ClusterFracs = []

        f = open(fname)
        contents = f.read()

        #Sub-function section reader
        def read_section(name):
            sectiondata=[]
            flag=0
            for line in contents.strip().split('\n'):#line by line read
                if(line==name): #Found the section
                    flag=1
                    continue
                if(flag == 1 and line == blockender):#Stop @ blockender
                    break
                if(line.find(commenter) == -1 and flag == 1): #Save data and skip the comment line
                    linedata=[]
                    for data in line.split():
                        linedata.append(data)
                    if(len(linedata)!=0): 
                        sectiondata.append(linedata)
            
            return sectiondata
        
        secdata=read_section('DFN_INFO')
        Dimension=int(secdata[0][0])
        FracNets.Dim=Dimension

        secdata=read_section('DFN_POINTS')
        NumPts = int(secdata[0][0])
        for i in range(1,NumPts+1):
            Pts=np.array(secdata[i],dtype=float)
            FracNets.Points.append(Pts)
        
        secdata = read_section('DFN_FRACTURES')
        FracNets.NumFracs = int(secdata[0][0])
        for i in range(1,FracNets.NumFracs+1):
            NumPts=int(secdata[i][0])
            Frac=[]
            for j in range(1,NumPts+1):
                Frac.append(int(secdata[i][j]))
            FracNets.Fractures.append(Frac)
            FracNets.NumPtsFrac.append(NumPts)
        
        FracNets.NumFracsPts = sum(FracNets.NumPtsFrac)
        
        secdata = read_section('DFN_INTERSECTIONS')
        FracNets.NumInts=int(secdata[0][0])
        FracNets.FracIntersects=[[] for i in range(FracNets.NumFracs)]
        for i in range(1, FracNets.NumInts + 1):
            FracPair = np.array([secdata[i][0], secdata[i][1]], dtype=int)
            FracNets.IntersectFracs.append(FracPair)
            if(Dimension==3):
                PtsID = np.array([secdata[i][2], secdata[i][3]], dtype=int)
                FracNets.IntersectsLines.append(PtsID)
            if(Dimension==2):
                PtsID = int(secdata[i][2])
                FracNets.IntersectsPts.append(PtsID)
            #Analysis the Intersection for each frac
            FracNets.FracIntersects[FracPair[0]].append(i-1)
            FracNets.FracIntersects[FracPair[1]].append(i-1)

        FracNets.NumIntersectsPts=2*FracNets.NumInts

        '''
        for fi in range(FracNets.NumFracs):
            IntersectList=[]
            for i in range(FracNets.NumInts):
                if(FracNets.IntersectFracs[i][0] == fi or FracNets.IntersectFracs[i][1]==fi):
                    IntersectList.append(i)
            FracNets.FracIntersects.append(IntersectList)
        '''

        secdata = read_section('WELL_DFN_INTERSECTIONS')
        if(len(secdata)>0): FracNets.NumWells = int(secdata[0][0])
        for i in range(1,FracNets.NumWells+1):
            NumWellInts=int(secdata[i][0])
            WellFracInt=[]
            for j in range(1,NumWellInts+1):
                WellID=i-1
                FracID=int(secdata[i][2*j-1])
                NodeID=int(secdata[i][2*j])
                WellFracInt.append([FracID,NodeID])
                FracNets.FracsIntersectWell[FracID].append([WellID,NodeID])
            FracNets.WellFracIntersects.append(WellFracInt)

        
        secdata = read_section('DFN_CLUSTERS')
        if(len(secdata)>0): FracNets.NumClusters = int(secdata[0][0])
        for i in range(1,FracNets.NumClusters+1):
            NumFracIDs=int(secdata[i][0])
            FracIDs=[]
            for j in range(1,NumFracIDs+1):
                FracIDs.append(int(secdata[i][j]))
            FracNets.ClusterFracs.append(FracIDs)

        

        #debug
        #print(FracNets.Points)
        #print(FracNets.Fractures)
        #print(FracNets.IntersectsLines)
        #print(FracNets.IntersectsPts)
        #print(FracNets.IntersectFracs)
        #print(FracNets.FracIntersects)
        #print(FracNets.ClusterFracs)
        print('[Input] Reading "%s" DFN file....'%(fname))
        print("Dimension=",FracNets.Dim)
        print("Number of Points=",len(FracNets.Points))
        print("Number of Fractures=", FracNets.NumFracs)
        print("Number of Intersections=", FracNets.NumInts)
        print("Number of Wells=", FracNets.NumWells)

        TotalPrintNumber=5
        Interval=int(FracNets.NumFracs/TotalPrintNumber)+1
        if(FracNets.NumInts>0):
            for i in range(FracNets.NumFracs):
                if(i%Interval==0 or i==FracNets.NumFracs-1): print('Fracture', i, 'has Intersections of ', FracNets.FracIntersects[i])

        f.close()
    

def write_PyGeoMeshFile_dat(FracNets, fname,delimiter=' ',commenter='--',blockender='/'):
        '''Write the native fracture network geometry input file 
        see read_PyGeoMeshFile for file format details

        Author:Bin Wang(binwang.0213@gmail.com)
        Date: June. 2018
        '''
        print('[Output] Writing "%s" DFN file....'%(fname))

        with open(fname, "w") as f:
            # Write Header
            f.write('--DFN Genetrated by PyGeoMesh \n\n')
            
            
            # Write summary info
            f.write('DFN_INFO\n')
            f.write('--Dimension,NumPts,NumFracs,NumInts,NumClusters,NumWells\n')
            f.write('{:d} {:d} {:d} {:d} {:d} {:d}\n'.format(FracNets.Dim,len(FracNets.Points),FracNets.NumFracs,FracNets.NumInts,FracNets.NumClusters,FracNets.NumWells))
            f.write(blockender+'\n\n')

            # Write DFN CLUSTERS
            if(FracNets.NumClusters>0):
                f.write('DFN_CLUSTERS\n')
                f.write('--NumFrac FracIDlist[1,5,10..]\n')
                f.write('{:d}\n'.format(FracNets.NumClusters))
                for ci in range(FracNets.NumClusters):
                    NumFracIDs=len(FracNets.ClusterFracs[ci])
                    f.write('{:d}'.format(NumFracIDs))
                    for i in range(NumFracIDs):
                        f.write('\t{:d}'.format(FracNets.ClusterFracs[ci][i]))
                    f.write('\n')
                f.write(blockender+'\n\n')

            # Write DFN_POINTS
            if(len(FracNets.Points)>0):
                f.write('DFN_POINTS\n')
                f.write('--[x,y,z]\n')
                f.write('{:d}\n'.format(len(FracNets.Points)))
                for i in range(len(FracNets.Points)):
                    if(i==FracNets.NumFracsPts):
                        f.write('\n')
                    if(i==len(FracNets.Points)-FracNets.NumWellPts):
                        f.write('\n')
                    f.write('{:.15f}\t{:.15f}\t{:.15f}\n'.format(FracNets.Points[i][0],FracNets.Points[i][1],FracNets.Points[i][2]))
                f.write(blockender+'\n\n')

            # Write DFN_FRACTURES
            if(FracNets.NumFracs>0):
                f.write('DFN_FRACTURES\n')
                f.write('--NumPts [PtsId=1...NumPts]\n')
                f.write('{:d}\n'.format(FracNets.NumFracs))
                for fi in range(FracNets.NumFracs):
                    NumPts=len(FracNets.Fractures[fi])
                    f.write('{:d}'.format(NumPts))
                    for i in range(NumPts):
                        f.write('\t{:d}'.format(FracNets.Fractures[fi][i]))
                    f.write('\n')
                f.write(blockender+'\n\n')

            # Write DFN_INTERSECTIONS
            if(FracNets.NumInts>0):
                f.write('DFN_INTERSECTIONS\n')
                f.write('--FracID1 FracID2 [PtsID 1,2]\n')
                f.write('{:d}\n'.format(FracNets.NumInts))
                for i in range(FracNets.NumInts):
                    f.write('{:d}\t{:d}\t'.format(FracNets.IntersectFracs[i][0],FracNets.IntersectFracs[i][1]))
                    f.write('{:d}\t{:d}\n'.format(FracNets.IntersectsLines[i][0],FracNets.IntersectsLines[i][1]))
                f.write(blockender+'\n\n')
            

            #Write WELL_DFN_INTERSECTIONS
            if(FracNets.NumWells>0):
                f.write('WELL_DFN_INTERSECTIONS\n')
                f.write('--NumInts (FracID1,IntID1) (FracID2, IntID2) (...)\n')
                f.write('{:d}\n'.format(FracNets.NumWells))
                for wi in range(FracNets.NumWells):
                    NumWellInts=len(FracNets.WellFracIntersects[wi])
                    f.write('{:d}\t'.format(NumWellInts))
                    for i in range(NumWellInts):
                        f.write('{:d}\t{:d}\t'.format(FracNets.WellFracIntersects[wi][i][0],FracNets.WellFracIntersects[wi][i][1]))
                    f.write('\n')
                f.write(blockender+'\n\n')

        f.close()